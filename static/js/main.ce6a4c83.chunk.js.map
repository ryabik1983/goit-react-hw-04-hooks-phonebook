{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/uselocalstorage/uselocalstorage.js","App.js","index.js"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","e","currentTarget","value","className","styles","preventDefault","label","input","type","onChange","pattern","title","placeholder","required","submit","Filter","filter","ContactsList","renderContacts","deleteContact","list","map","el","item","span","btn","id","onClick","useLocalStorage","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","App","setFilter","contacts","setContacts","newItem","nanoid","some","alert","prevContacts","toLowerCaseFilter","toLowerCase","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce6a4c83.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_form\":\"ContactForm_contact_form__OcpYs\",\"label\":\"ContactForm_label__383NX\",\"input\":\"ContactForm_input__1Xf8U\",\"submit\":\"ContactForm_submit__3hMvx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1pho2\",\"item\":\"ContactList_item__3OXWy\",\"btn\":\"ContactList_btn___M_my\",\"span\":\"ContactList_span__2PQQx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1dfn5\",\"input\":\"Filter_input__LSwXe\"};","import React, {useState} from 'react';\nimport styles from './ContactForm.module.css';\n// import { nanoid } from 'nanoid';\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   nameInputId = nanoid();\n//   handleChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n//     this.props.onSubmit(this.state);\n//     this.reset();\n//   };\n//   reset = () => {\n//     this.setState({\n//       name: '',\n//       number: '',\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <form className={styles.contact_form} onSubmit={this.handleSubmit}>\n//         <label className={styles.label} htmlFor={this.nameInputId}>\n//           Name\n//           <input\n//             className={styles.input}\n//             type=\"text\"\n//             name=\"name\"\n//             onChange={this.handleChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             placeholder=\"Ivan Dulin\"\n//             id={this.nameInputId}\n//             required\n//           />\n//         </label>\n//         <label className={styles.label}>\n//           Number\n//           <input\n//             className={styles.input}\n//             type=\"tel\"\n//             name=\"number\"\n//             onChange={this.handleChange}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             placeholder=\"067-233-15-14\"\n//             required\n//           />\n//         </label>\n//         <button className={styles.submit} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n// export default ContactForm;\n\nconst ContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState (''); \n  const [number, setNumber] = useState ('')\n  const handleChange = e => {\n   if (e.currentTarget.name === 'name') setName(e.currentTarget.value);\n   if (e.currentTarget.name === 'number') setNumber(e.currentTarget.value); \n  };\n  const handleSubmit = e => {\n        e.preventDefault();\n        onSubmit({\n          name: name,\n          number: number,\n        });\n        setName('');\n        setNumber('');\n      };\n      return (\n              <form className={styles['contact_form']} onSubmit={handleSubmit}>\n                <label className={styles.label}>\n                  Name\n                  <input\n                    className={styles.input}\n                    type=\"text\"\n                    name=\"name\"\n                    onChange={handleChange}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    placeholder=\"Ivan Dulin\"\n                    required\n                    value={name}\n                  />\n                </label>\n                <label className={styles.label}>\n                  Number\n                  <input\n                    className={styles.input}\n                    type=\"tel\"\n                    name=\"number\"\n                    onChange={handleChange}   \n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    placeholder=\"067-233-15-14\"\n                    required\n                    value={number}\n                  />\n                </label>\n                <button className={styles.submit} type=\"submit\">\n                  Add contact\n                </button>\n              </form>\n            );\n\n}\nexport default ContactForm;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <div className={styles.filter}>\n      <label className={styles.label}>\n        Find contacts by name\n        <input\n          className={styles.input}\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n        />\n      </label>\n    </div>\n  );\n};\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactList.module.css';\n\nconst ContactsList = ({ renderContacts, deleteContact }) => {\n  return (\n    <ul className={styles.list}>\n      {renderContacts.map(el => {\n        return (\n          <li className={styles.item} key={el.id}>\n            <span className={styles.span}>\n              {el.name}: {el.number}\n            </span>\n            <button\n              className={styles.btn}\n              type=\"button\"\n              id={el.id}\n              onClick={() => {\n                deleteContact(el.id);\n              }}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nContactsList.propTypes = {\n  renderContacts: PropTypes.array.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import {useState, useEffect} from 'react';\r\n\r\nconst useLocalStorage = (key, defaultValue) => {\r\n    const [state, setState] = useState(\r\n        () => JSON.parse(window.localStorage.getItem(key)) ?? defaultValue,\r\n    );\r\n    useEffect(() => {\r\n        window.localStorage.setItem(key, JSON.stringify(state));\r\n        }, [key, state]);\r\n        return [state, setState];\r\n};\r\nexport default useLocalStorage;","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactsList from './components/ContactList/ContactList';\nimport useLocalStorage from './components/uselocalstorage/uselocalstorage';\n// import Modal from './components/Modal/Modal';\nimport './App.css';\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//     name: '',\n//     number: '',\n//     // showModal: false,\n//   };\n\n  // toggleModal = () => {\n  //   this.setState(({ showModal }) => ({\n  //     showModal: !showModal,\n  //   }));\n  // };\n\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   console.log(contacts);\n  //   const parsedContacts = JSON.parse(contacts);\n  //   console.log(parsedContacts);\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n  // componentDidMount() {\n  //   const contacts = JSON.parse(localStorage.getItem('contacts'));\n  //   console.log('App componentDidMount');\n\n  //   if (contacts) {\n  //     this.setState({ contacts: contacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState, snapshot) {\n  //   console.log('App Component update');\n  //   console.log(prevState);\n  //   console.log(this.state);\n\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     console.log('Update Contacts');\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n    // if (prevProps.contacts !== this.state.contacts) {\n    //   console.log('Обновилось поле contacts');\n    //   localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    // }\n  // }\n  // formSubmitData = ({ name, number }) => {\n  //   const newItem = { id: nanoid(), name: name, number: number };\n  //   let isUnique = this.state.contacts.some(el => el.name === name);\n  //   if (!isUnique) {\n  //     this.setState(prevStates => ({\n  //       contacts: [...prevStates.contacts, newItem],\n  //     }));\n  //   } else {\n  //     alert(`${name} is already in contacts`);\n  //   }\n  // };\n\n  // changeFilter = e => {\n  //   this.setState({ filter: e.currentTarget.value });\n  // };\n\n  // renderContacts = () => {\n  //   const { filter, contacts } = this.state;\n  //   const toLowerCaseFilter = filter.toLowerCase();\n  //   return contacts.filter(el =>\n  //     el.name.toLowerCase().includes(toLowerCaseFilter),\n  //   );\n  // };\n\n  // deleteContact = id => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(el => el.id !== id),\n  //   }));\n  // };\n\n  // render() {\n  //   console.log('App render');\n\n  //   const { contacts, filter, showModal } = this.state;\n  //   return (\n  //     <main className=\"main\">\n  //       {/* <div>\n        //   <button type=\"button\" onClick={this.toggleModal}>\n        //     Open modal\n        //   </button>\n        //   {showModal && (\n        //     <Modal onClose={this.toggleModal}>\n        //       <h1>Hello!</h1>\n        //       <p>#lorem ipsum dolor</p>\n        //       <button type=\"button\" onClick={this.toggleModal}>\n        //         Close modal\n        //       </button>\n        //     </Modal>\n        //   )}\n        // </div> */}\n       /* <h1 className=\"title\">Phonebook</h1>\n        <ContactForm onSubmit={this.formSubmitData} />\n        <h2 className=\"title\">Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactsList\n          renderContacts={this.renderContacts()}\n          deleteContact={this.deleteContact}\n        />\n      </main>\n    );\n  }\n}\n\n// export default App; */\n\nfunction App () {\nconst [filter, setFilter] = useState ('');\nconst [contacts, setContacts] = useLocalStorage('contacts', []);\n\nconst formSubmitData = ({ name, number }) => {\n  const newItem = { id: nanoid(), name: name, number: number };\n  let isUnique = contacts.some(el => el.name === name);\n  if (!isUnique) {\n    setContacts(prevContacts => {\n      return [...prevContacts, newItem];\n    });\n  } else {\n    alert(`${name} is already in contacts`);\n  }\n};\n\nconst changeFilter = e => {\n  setFilter(e.currentTarget.value);\n};\n\nconst renderContacts = () => {\n  const toLowerCaseFilter = filter.toLowerCase();\n  return contacts.filter(el =>\n    el.name.toLowerCase().includes(toLowerCaseFilter),\n  );\n};\n\nconst deleteContact = id => {\n  setContacts(prevContacts => {\n    return prevContacts.filter(el => el.id !== id);\n  });\n};\n\nreturn (\n  <main className=\"main\">\n    <h1 className=\"title\">Phonebook</h1>\n    <ContactForm onSubmit={formSubmitData} />\n    <h2 className=\"title\">Contacts</h2>\n    <Filter value={filter} onChange={changeFilter} />\n    <ContactsList\n      renderContacts={renderContacts()}\n      deleteContact={deleteContact}\n    />\n  </main>\n);\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}